/*!
 * ASP.NET SignalR JavaScript Library v2.2.0
 * https://e.mail.ru/messages/inbox/?back=1
 *
 * Copyright Microsoft Open Technologies, Enc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/ksp97/123
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['mainHub'] = this.createHubProxy('mainHub'); 
        proxies['mainHub'].client = { };
        proxies['mainHub'].server = {
            attachIdentity: function (name, password) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["AttachIdentity"], $.makeArray(arguments)));
             },

            beginCollectRain: function (key) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["BeginCollectRain"], $.makeArray(arguments)));
             },

            cancelWithdrawals: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["CancelWithdrawals"], $.makeArray(arguments)));
             },

            changePassword: function (oldpassword, newpassword) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["ChangePassword"], $.makeArray(arguments)));
             },

            collectRain: function (host, key, challenge, response) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["CollectRain"], $.makeArray(arguments)));
             },

            confirmTotpSecret: function (number) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["ConfirmTotpSecret"], $.makeArray(arguments)));
             },

            createIdentity: function (name, password) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["CreateIdentity"], $.makeArray(arguments)));
             },

            createUser: function (username, password) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["CreateUser"], $.makeArray(arguments)));
             },

            detectBrowser: function (txt) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["DetectBrowser"], $.makeArray(arguments)));
             },

            getApiKey: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetApiKey"], $.makeArray(arguments)));
             },

            getBalanceAdjustments: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetBalanceAdjustments"], $.makeArray(arguments)));
             },

            getBanInfoChat: function (accountId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetBanInfoChat"], $.makeArray(arguments)));
             },

            getBanRequests: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetBanRequests"], $.makeArray(arguments)));
             },

            getBetBatchDetails: function (betBatchId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetBetBatchDetails"], $.makeArray(arguments)));
             },

            getDepositAddress: function (currencyId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetDepositAddress"], $.makeArray(arguments)));
             },

            getDeposits: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetDeposits"], $.makeArray(arguments)));
             },

            getFaucetPayouts: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetFaucetPayouts"], $.makeArray(arguments)));
             },

            getRadios: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetRadios"], $.makeArray(arguments)));
             },

            getReferralPayouts: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetReferralPayouts"], $.makeArray(arguments)));
             },

            getReferrals: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetReferrals"], $.makeArray(arguments)));
             },

            getServerSeedHash: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetServerSeedHash"], $.makeArray(arguments)));
             },

            getStartupInfo: function (wantBets) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetStartupInfo"], $.makeArray(arguments)));
             },

            getTotpSecret: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetTotpSecret"], $.makeArray(arguments)));
             },

            getWithdrawals: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["GetWithdrawals"], $.makeArray(arguments)));
             },

            joinRoom: function (roomId, rejoin) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinRoom"], $.makeArray(arguments)));
             },

            placeAutomatedBets: function (basePayIn, guessLow, guessHigh, maxBets, resetOnWin, resetOnLose, increaseOnWinPercent, increaseOnLosePercent, maxAllowedPayIn, resetOnLoseMaxBet, stopOnLoseMaxBet, stopMaxBalance, stopMinBalance, startingPayIn, clientSeed, currencyId, newProtocol) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["PlaceAutomatedBets"], $.makeArray(arguments)));
             },

            placeBet: function (payIn, guessLow, guessHigh, clientSeed, currencyId, newProtocol) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["PlaceBet"], $.makeArray(arguments)));
             },

            report: function (text) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Report"], $.makeArray(arguments)));
             },

            reportRainStatus: function (code) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["ReportRainStatus"], $.makeArray(arguments)));
             },

            requestBan: function (accountId, banMinutes, notes) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["RequestBan"], $.makeArray(arguments)));
             },

            requestFaucetPayout: function (host, challenge, response) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["RequestFaucetPayout"], $.makeArray(arguments)));
             },

            requestReferralPayout: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["RequestReferralPayout"], $.makeArray(arguments)));
             },

            sendChatText: function (text, roomId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SendChatText"], $.makeArray(arguments)));
             },

            sendContactMessage: function (text) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SendContactMessage"], $.makeArray(arguments)));
             },

            setAllowKeyboardBetParams: function (allow) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetAllowKeyboardBetParams"], $.makeArray(arguments)));
             },

            setAllowKeyboardBets: function (allow) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetAllowKeyboardBets"], $.makeArray(arguments)));
             },

            setAllowKeyboardMaxBet: function (allow) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetAllowKeyboardMaxBet"], $.makeArray(arguments)));
             },

            setAnnounceHighBets: function (announce, threshhold, currencyId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetAnnounceHighBets"], $.makeArray(arguments)));
             },

            setClientSeed: function (seed) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetClientSeed"], $.makeArray(arguments)));
             },

            setConfirmMaxBet: function (confirm) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetConfirmMaxBet"], $.makeArray(arguments)));
             },

            setFriendlyName: function (name) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetFriendlyName"], $.makeArray(arguments)));
             },

            setManualSeed: function (manual) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetManualSeed"], $.makeArray(arguments)));
             },

            setOverlappingBetsAllowed: function (allow) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetOverlappingBetsAllowed"], $.makeArray(arguments)));
             },

            setStreamAllBets: function (allow) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetStreamAllBets"], $.makeArray(arguments)));
             },

            setWarnSwitchCurrencies: function (warn) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SetWarnSwitchCurrencies"], $.makeArray(arguments)));
             },

            stillAlive: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["StillAlive"], $.makeArray(arguments)));
             },

            supportGetAccountInfo: function (accountId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SupportGetAccountInfo"], $.makeArray(arguments)));
             },

            switchLogin: function (username, password, totp) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SwitchLogin"], $.makeArray(arguments)));
             },

            telemetry: function (flags) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Telemetry"], $.makeArray(arguments)));
             },

            test: function (accountId, testReport) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Test"], $.makeArray(arguments)));
             },

            transfer: function (amount, accountId, totp, currencyId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Transfer"], $.makeArray(arguments)));
             },

            tryAddContactMessage: function (accountid, text) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["TryAddContactMessage"], $.makeArray(arguments)));
             },

            twoFactorAdjust: function (date, languages) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["TwoFactorAdjust"], $.makeArray(arguments)));
             },

            updateEmail: function (email) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["UpdateEmail"], $.makeArray(arguments)));
             },

            updateEmergencyAddress: function (bitcoinAddress) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["UpdateEmergencyAddress"], $.makeArray(arguments)));
             },

            updateRadio: function (radioId, title, subtitle, url) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["UpdateRadio"], $.makeArray(arguments)));
             },

            voteForBan: function (banRequestId, notes) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["VoteForBan"], $.makeArray(arguments)));
             },

            wantBetBroadcasts: function (want) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["WantBetBroadcasts"], $.makeArray(arguments)));
             },

            withdraw: function (amount, bitcoinAddress, totp, currencyId) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Withdraw"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));
